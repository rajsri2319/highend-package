29|03|2023
Bitwise Operators:(And,Or,Not)(&,|,!)


1.Priority rule(1.Highest priority:()(Peranthesis)

                2.underscore_)
2.Associative law


Table:
languages:     C             python            Java

And Operand:   &               &                && 

Or Operand:    |               |                |  

Not Operand:   ~               ~                ~
               (1's complement)

Xor Operand:   ^               ^                ^



->When their is Arthematic operator and bit wise(only for & and | not for ~) highest priority order is Arthematic.('~' is higher than & and | and Arthematic)
->Priority order:
  1.~
  2.Arthematic operators
  3.&
  4.|
->Inclusive XOR = OR
->Exclusive XOR = XOR
->"<<":Left Shift- Shift from Right to left(For an eight bit binary number)[ex:7(0000 0111) to 14(0000 1110)]
->">>":Right Shift-Shift from left to Right(For an eight bit binary number)[ex:7(0000 0111) to 3(0000 0011)]


Bit Manipulation Tricks:
Xor:
1.XOR of two same numbers is '0'
2.XOR of zero with any number is the same number
3.XOR of even 1's is '0'
4.XOR of odd 1's is '1'

Right Shift(>>):
1.To shift a number for 1 time we need to divide 2 for one to the given number then we get the answer.
2.In the same to shift a number for n times we need to divide the given number with 2 for n number of times.
ex:9>>4
 9/16~0

Left Shift(<<):
1.To shift a number for 1 time we need to multiply 2 for one to the given number then we get the answer.
2.In the same to shift a number for n times we need to multiply the given number with 2 for n number of times.
ex:10>>3
 10*8=80

p)After creating an array find out the missing smallest positive integer.

Code I did:(time complexity:O(n^2))
java:
import java.util.*;
class arr{
public static void main(String args[]){
int min=0;
int r=0;
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
int[] a=new int[n];
for(int i=0;i<n;i++){
a[i]=sc.nextInt();
if(a[i]>=0){
if(a[i]<=min) min=a[i];
}
}
int j=0;
int i=0;
for(min=min;i!=-1;min++){
for(j=0;j<n;j++){
if(a[j]>=0){
if(min!=a[j]){
if(j==n-1){
i=-1;
}
}
}
}
}
System.out.print("Smallest missing +ve number"+min);
}
}
Efficient code:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner in=new Scanner(System.in);
        System.out.println("Enter array size:");
        int n=in.nextInt();

        int[] arr=new int[n];
        System.out.println("Enter array elements:");
        for(int i=0;i<n;i++){
            arr[i]=in.nextInt();
        }

        checkWithCurr(arr); //Sorting O(n) time complexity
        int ans=missing(arr);

        System.out.println(ans);

    }
    static void checkWithCurr(int[] arr)
    {
        int i=0;
        while(i<arr.length)
        {
            int correct=arr[i];
            if(arr[i]>=arr.length)
            {
                i++;
            }
            else if(arr[i]<0){
                i++;
            }
            else if(arr[i]==arr[correct])
            {
                i++;
            }
            else {
                int temp=arr[i];
                arr[i]=arr[correct];
                arr[correct]=temp;
            }
        }

    }
    static int missing(int[] arr)
    {
        for(int i=0;i<arr.length;i++){
            if(arr[i]!=i){
                return i;
            }

        }
        return arr.length;
    }
}

q1.  In the given array every number occures twice print a number that occure only ones.
Given code:(python)
def findSingle(ar,n):
            res=ar[0]
            for i in range(1,n):
                     res=res^ar[i]
            return res
ar=[2,3,5,4,5,3,4,2,88]
print(findSingle(ar,len(ar)))

q2.Swapping two numbers using XOR
code:
a=100
b=200
a=a^b
b=a^b
a=a^b
print("a:",a,"b:",b)

q3.For the given number n check the kth bit is set or not.(Not Set is if the bit is 0 otherwise it is set)
 formula:n&(1<<k-1) where k is the bit we choose
 ex: if n=10,k=3
      10&(1<<2)=10&4=0=>not set
Code i wrote:
#include<stdio.h>
void main(){
	int n,k,r;
	printf("\nEnter the number:");
	scanf("%d",&n);
	printf("\nEnter the bit number:");
	scanf("%d",&k);
	r=n&(1<<k-1);
	if(r==0){
		printf("\n%d position bit of number %d is not set",k,n);
	}
	else{
		printf("\n%d position bit of number %d is set",k,n);
	}
}

q4.For the given number n find the XOR of n numbers.
Code i wrote:
      #include<stdio.h>
void main(){
	int n,i;
	printf("\nEnter the number:");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		n=n^(n-1);
	}
	printf("%d",n);
}

Code is given(Order of 1):
#include<stdio.h>
void main(){
	int n;
	printf("\nEnter the number:");
	scanf("%d",&n);
	if(n%4==0){
			printf("%d",n);
	}
	else	if(n%4==1){
		printf("%d",1);
	}
	else	if(n%4==2){
			printf("%d",n+1);
	}
		else{
			printf("%d",0);
	}
}

q5.Find out XOR for all the given numbers for given range.
Efficient program:
#include<stdio.h>
void main(){
	int u,l;
	printf("\nEnter the lower bond:");
	scanf("%d",&l);
		printf("\nEnter the upper bond:");
	scanf("%d",&u);
	if(u%4==0){
			u=u;
			
	}
	else	if(u%4==1){
		u=1;
		
	}
	else	if(u%4==2){
		u=u+1;
		
	}
		else{
			u=0;
			}
				if((l-1)%4==0){
			l=l-1;
			
	}
	else	if((l-1)%4==1){
		l=1;
		
	}
	else	if((l-1)%4==2){
		l=l;
		
	}
		else{
			l=0;
			}
			int r=u^l;
			printf("%d",r);
}

q6.Check number odd or even :
Efficient program:
#include<stdio.h>
void main(){
	int l;
	printf("\nEnter the number:");
	scanf("%d",&l);
		if(l&1==0){
			printf("Even");
		}
		else{
			printf("odd");
		}
}
